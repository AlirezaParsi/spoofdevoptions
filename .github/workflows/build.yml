name: SpoofDevOptions

on:
  workflow_dispatch:
    inputs:
      upload_to_release:
        description: 'Upload ZIP to GitHub Release?'
        type: boolean
        required: true
        default: false
      upload_to_telegram:
        description: 'Upload ZIP to Telegram?'
        type: boolean
        required: true
        default: false
      branch:
        description: 'Branch to build from'
        type: string
        required: true
        default: 'main'
      title:
        description: 'Custom title for Telegram message'
        type: string
        required: false
        default: ''
      custom_version:
        description: 'Custom version (e.g. 1.0.0)'
        type: string
        required: false
      custom_version_code:
        description: 'Custom version code (e.g. 100)'
        type: string
        required: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    environment: Telegram

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Android SDK and NDK
        run: |
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          if [ -d "$ANDROID_HOME/cmdline-tools/cmdline-tools" ]; then
            mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          elif [ -d "$ANDROID_HOME/cmdline-tools/tools" ]; then
            mv $ANDROID_HOME/cmdline-tools/tools $ANDROID_HOME/cmdline-tools/latest
          else
            echo "Unexpected directory structure after unzip:"
            ls -la $ANDROID_HOME/cmdline-tools
            exit 1
          fi
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653" "platforms;android-34" "build-tools;34.0.0"
          echo "NDK_PATH=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Accept Android SDK licenses
        run: |
          JAVA_OPTS="--add-modules java.xml.bind" yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "License acceptance failed!"

      - name: Install build tools and Python dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake zip curl imagemagick python3 python3-pip
          pip3 install telethon

      - name: Fetch Zygisk Headers and JSON Library
        run: |
          mkdir -p zygisk include/nlohmann
          wget https://raw.githubusercontent.com/topjohnwu/zygisk-module-sample/master/module/jni/zygisk.hpp -O zygisk/zygisk.hpp
          wget https://github.com/nlohmann/json/releases/download/v3.11.3/json.hpp -O include/nlohmann/json.hpp

      - name: Build Project (arm64-v8a) - Start
        id: arm64_start
        run: |
          echo "ARM64_START_TIME=$(date -u +%s)" >> $GITHUB_ENV

      - name: Build Project (arm64-v8a)
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build/arm64-v8a
          args: |
            -DCMAKE_TOOLCHAIN_FILE=${{ env.NDK_PATH }}/build/cmake/android.toolchain.cmake
            -DANDROID_ABI=arm64-v8a
            -DANDROID_PLATFORM=android-34
            -DANDROID_STL=c++_shared
            -DCMAKE_MAKE_PROGRAM=/usr/bin/make
            -DCMAKE_SYSROOT=${{ env.NDK_PATH }}/sysroot

      - name: Build Project (arm64-v8a) - End
        id: arm64_end
        run: |
          ARM64_END_TIME=$(date -u +%s)
          ARM64_DURATION=$((ARM64_END_TIME - ARM64_START_TIME))
          echo "ARM64_BUILD_TIME=$ARM64_DURATION" >> $GITHUB_ENV
          if [ ! -f "build/arm64-v8a/libspoof.so" ]; then
            echo "Error: arm64-v8a library not built!"
            ls -la build/arm64-v8a
            exit 1
          fi

      - name: Build Project (armeabi-v7a) - Start
        id: arm32_start
        run: |
          echo "ARM32_START_TIME=$(date -u +%s)" >> $GITHUB_ENV

      - name: Build Project (armeabi-v7a)
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build/armeabi-v7a
          args: |
            -DCMAKE_TOOLCHAIN_FILE=${{ env.NDK_PATH }}/build/cmake/android.toolchain.cmake
            -DANDROID_ABI=armeabi-v7a
            -DANDROID_PLATFORM=android-34
            -DANDROID_STL=c++_shared
            -DCMAKE_MAKE_PROGRAM=/usr/bin/make
            -DCMAKE_SYSROOT=${{ env.NDK_PATH }}/sysroot

      - name: Build Project (armeabi-v7a) - End
        id: arm32_end
        run: |
          ARM32_END_TIME=$(date -u +%s)
          ARM32_DURATION=$((ARM32_END_TIME - ARM32_START_TIME))
          echo "ARM32_BUILD_TIME=$ARM32_DURATION" >> $GITHUB_ENV
          if [ ! -f "build/armeabi-v7a/libspoof.so" ]; then
            echo "Error: armeabi-v7a library not built!"
            ls -la build/armeabi-v7a
            exit 1
          fi

      - name: Prepare module structure
        run: |
          mkdir -p module/zygisk module/META-INF/com/google/android
          cp build/arm64-v8a/libspoof.so module/zygisk/arm64-v8a.so
          cp build/armeabi-v7a/libspoof.so module/zygisk/armeabi-v7a.so
          chmod 755 module/zygisk/arm64-v8a.so module/zygisk/armeabi-v7a.so
          cp config.json module/config.json
          cp module.prop module/module.prop
          cp customize.sh module/customize.sh
          cp META-INF/com/google/android/update-binary module/META-INF/com/google/android/update-binary
          cp META-INF/com/google/android/updater-script module/META-INF/com/google/android/updater-script
          
          # Set version and versionCode from inputs or use defaults
          VERSION="${{ github.event.inputs.custom_version || '1.0.0' }}"
          VERSION_CODE="${{ github.event.inputs.custom_version_code || '100' }}"
          
          sed -i "s/version=1.0.0/version=$VERSION/" module/module.prop
          sed -i "s/versionCode=100/versionCode=$VERSION_CODE/" module/module.prop

      - name: Package module into ZIP
        run: |
          VERSION=$(grep "version=" module/module.prop | cut -d'=' -f2)
          ZIP_NAME="SpoofDevOptions-v$VERSION.zip"
          cd module
          zip -r "../$ZIP_NAME" .
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload Module ZIP as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SpoofDevOptions
          path: ${{ env.ZIP_NAME }}

      - name: Upload ZIP to GitHub Release
        if: github.event.inputs.upload_to_release == 'true'
        run: |
          TAG="v${{ env.VERSION }}"
          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "Built on $(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            --draft \
            || gh release edit "$TAG" --draft
          gh release upload "$TAG" ${{ env.ZIP_NAME }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Telegram Notification
        if: github.event.inputs.upload_to_telegram == 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ZIP_NAME: ${{ env.ZIP_NAME }}
          TITLE: ${{ github.event.inputs.title || 'New SpoofDevOptions Module Build' }}
          WORKFLOW_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          UPLOAD_TO_RELEASE: ${{ github.event.inputs.upload_to_release }}
          VERSION: ${{ env.VERSION }}
          BRANCH: ${{ github.event.inputs.branch }}
          ARM64_BUILD_TIME: ${{ env.ARM64_BUILD_TIME }}
          ARM32_BUILD_TIME: ${{ env.ARM32_BUILD_TIME }}
          COMMIT: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
        run: |
          python3 - <<EOF
          from telethon import TelegramClient
          import os

          bot_token = os.getenv('TELEGRAM_TOKEN')
          chat_id = int(os.getenv('TELEGRAM_CHAT_ID'))

          client = TelegramClient('github_bot', 2040, 'b18441a1ff607e10a989891a5462e627').start(bot_token=bot_token)

          async def send_notification():
              try:
                  title = os.getenv('TITLE')
                  build_type = "Release" if os.getenv('UPLOAD_TO_RELEASE') == 'true' else "CI"
                  message = (
                      f"**{title}**\n"
                      f"[View Workflow Run]({os.getenv('WORKFLOW_RUN_URL')})\n"
                      f"**Build Type**: {build_type}\n"
                      f"**Version**: {os.getenv('VERSION')}\n"
                      f"**Branch**: {os.getenv('BRANCH')}\n"
                      f"**Build Times**:\n"
                      f"- arm64-v8a: {os.getenv('ARM64_BUILD_TIME')} seconds\n"
                      f"- arm32-v7a: {os.getenv('ARM32_BUILD_TIME')} seconds\n"
                      f"**Run ID**: {os.getenv('RUN_ID')}"
                  )

                  await client.send_file(
                      chat_id,
                      file=os.getenv('ZIP_NAME'),
                      caption=message,
                      parse_mode='markdown'
                  )
                  print("Message sent successfully!")
              except Exception as e:
                  print(f"Failed to send notification: {e}")
                  exit(1)

          with client:
              client.loop.run_until_complete(send_notification())
          EOF
